pipeline {
    agent any

    stages {
        stage('Build Backend') {
            steps {
                script {
                    dir('backend/Arbaguette') {
                        sh 'chmod +x ./gradlew'
                        
                        sh './gradlew clean build -x test'

                        // Check if any container is named "backend"
def containerNamedBackend = sh(script: "docker ps -a --filter 'name=backend' --format '{{.ID}}'", returnStdout: true).trim()

if (containerNamedBackend) {
    // Stop and remove the container named "backend"
    sh "docker stop ${containerNamedBackend}"
    sh "docker rm ${containerNamedBackend}"
}


                        // Build and run the new backend container
                        sh "docker build -t backend ."
                        sh "docker run --name backend -d -p 8080:8080 backend"
                    }
                }
            }
        }
    }

    post {
        success {
        	script {
                // 빌드를 실행한 사용자 정보 가져오기
                def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()

                mattermostSend (color: 'good', 
                message: "배포 성공. ${user}",
                )
            }
        }
        failure {
        	script {
                // 빌드를 실행한 사용자 정보 가져오기
                // Git 정보를 통해 푸시한 사용자 확인
                def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()

                mattermostSend (color: 'danger', 
                message: "배포 실패. 범인 : ${user}",
                )
            }
        }
    }
}
